Notes to self / Dev journal

~Early Project~

MUD in discord

Accidentally uploaded token- then changed it. amazing how fast discord catches
	that sort of thing.

I'm going to need to think about how to direct bot to specific users - store game data for each character in a database,
then when bot receives a command check the user against the database. maybe have it whisper to each person?


How to store game data in database??
what exactly needs to be stored

player locations
player healths

quest statuses


~~~~~~~~~~~~~~

how will turns work?

how will the database store info from multiple games???

Make the database store a single "game" object
make the game object only reachable by a certain party leader - that
person initiates game, and can load it back up


Creating characters - should be given the option to join or create a party.
when creating a party - make a new party schema, add discord user id 


~~~~~~~~~~~~~~~5/23/23

Where I'm at now - the bot can read and write to database
User is capable of creating a new party on the server, creating characters

TODO now...
 - make it so adding to the party works
 - make it so I can print the party status to the player
 - make it so removing from the party works

questions..
 - Should there be a "party level"? This might cause issue if I don't
 	lock in the party members early on. E.g. players in party level up to 10 or so,
	then they drop out 3 out of 4 members and replace with little babies.
	 - Maybe party level can be based on all party members' levels? so that
	 	game scales appropriately, can switch players in or out (This seems
		like a good idea to me)
 - Need a main questline to start working on
 - should add a perception check in any given area- say an area has 10 perception checks in it,
 	but player only succeeds at 1 or 2 at low level- incentivizes players to return to old
	locations. Maybe when returning to an area where player perception level has increased
	have bot say something like "You sense something has changed about this place... roll perception?"


##Architecture of a Map nodes

 - Map Nodes will indicate places like cities, paths, forests, etc. Some cities should maybe
	even be split into multiple map nodes - west ardoigneou, for example
 - Within a map node, there will be: Buildings, visible characters (e.g. people in a town square).
 	In each building there will be visible characters and invisible characters

	Map Node (City of burgers)
	 |
	 |-Person (Meadow Soprano)
	 |
	 |-Building(Bar)
	 |   |-Person(Dilby)
	 |	 |-Person(Richard)
	 |
	 |-Building(store)
	 	 |-Person(Shopkeep)

###Random thought- what if the more questions you ask in an area, the more unsettled
	people are? like if each Building (maybe change building for Area) had an unsettled
	score that increased the more questions you asked, and made people more cagey until
	you left them alone for a little while or did something to lighten their mood
		- perhaps each person in an area could have a 'unsettled' variable. If it went
			up too high, they would talk to the other people in the area (bot would say
			something like 'dilby and richard are talking...' and their unsettled variables
			would 'compress' slightly (high goes down, due to talking- low goes up)


###RT - Dialogue can feel stale in games, even when a lot of attention is put into making it
	interesting. I imagine this is due to the exponential complexity involved with
	having more than a few characters- for each added character, having multiple
	paths of discussion naturally would result in very high complexity
	 - some games prevent this by having multiple dialogue options that only affect
	 	the next line of dialogue- we can tell, and this feels stale.
		E.g.
		Paimon: Traveler, you suck!
		Traveler: Paimon is an emergency snack OR Paimon shush up you
		Paimon: Don't talk to me that way (outcome the same either way)
	 - Don't know if this would make sense, but perhaps larger deviations from the
	 	branching paths could alleviate this slightly
		Old: -=-
		       __
		New: -=__=-

###RT - Djikstra's shortest path algorithm could be fun to mess with, with respect to
		the map nodes



~~~~~~~~~~~~~~~~~~~~~~~~

Need tpo rethink slightly how to do games/parties. Running into an issue with
adding a player to a party, i want to add a guildId to player, so they cant be 
brought from one server to another. That being said, maybe remove the idea of a
"game" schema and just attach the guild Id to everything, so that people can't 
mix and match between servers. 




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~5/24/23
As noted by my earlier message - games and parties are sort of an issue here.

I've added the bot to a second server, and it's getting very confused between serving
both of them- for example, enabling it on one server enables it for both. I need to
move the logic for enabling the bot into the database, so one server can have it
enabled, while the other doesn't.

Also, something has caused the entry of a null member in a party on the new server.
This breaks shit, so I have to sort that out as well. Stronger architecture would help
this move a little more smoothly- however, I lack the experience necessary to know how
to do that. 

TODO:
 - lock conversation contexts to a certain user, so other members talking doesn't interrupt
 	it or alter the conversation. Basically, lock the bot to a user while in a conversation.

 - Move bot enabling onto the database level, so that different servers can choose whether
 	or not it is enabled - there should be very strict operational boundaries between 
	servers, for obvious reasons.

 - Would be good to find out why a null player was entered.. 
